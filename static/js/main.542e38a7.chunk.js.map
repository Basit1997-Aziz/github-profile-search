{"version":3,"sources":["component/Github.jsx","logo.svg","component/FirstDiv.js","App.js","reportWebVitals.js","index.js"],"names":["GithubProfile","React","Component","getResult","setState","loading","urlToFetch","state","userName","fetch","then","response","json","dataObj","userProfile","userUpdate","event","target","value","renderCondition","valueToRender","type","onInput","this","onClick","style","width","src","alt","href","App","Github","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAkEeA,GClEA,I,MCEQC,IAAMC,U,kDFEzB,aAAc,IAAD,8BACT,gBAUJC,UAAY,WACR,EAAKC,SAAS,CAAEC,SAAQ,IACxB,IAAIC,EAAa,gCAAkC,EAAKC,MAAMC,SAC9CC,MAAMH,GACZI,MAAM,SAACC,GACEA,EAASC,OACfF,MAAM,SAACG,GACZ,EAAKT,SAAS,CACVU,YAAaD,EACbR,SAAQ,WApBX,EA0BbU,WAAa,SAACC,GACV,EAAKZ,SAAS,CACVI,SAAUQ,EAAMC,OAAOC,SA5BlB,EAgCbC,gBAAkB,SAAAC,GACd,OAA8B,OAA3B,EAAKb,MAAMO,YACH,GACF,EAAKP,MAAMF,QACT,aAEA,EAAKE,MAAMO,YAAYM,IAnClC,EAAKb,MAAQ,CACTO,YAAa,KACbT,SAAQ,EACRG,SAAS,IANJ,E,qDA8CT,OACI,gCACI,wDACA,uBAAOa,KAAK,OAAOC,QAASC,KAAKR,aACjC,wBAAQS,QAASD,KAAKpB,UAAtB,oBACA,sDACA,qBAAKsB,MATM,CACfC,MAAO,SAQqBC,IAAKJ,KAAKJ,gBAAgB,cAAeS,IAAKL,KAAKJ,gBAAgB,WAC3F,6BAAKI,KAAKJ,gBAAgB,WAC1B,sDAAwB,mBAAGU,KAAMN,KAAKJ,gBAAgB,YAAaF,OAAO,SAAlD,SAA4DM,KAAKJ,gBAAgB,iBACzG,qDAAwBI,KAAKJ,gBAAgB,iBAC7C,qDAAwBI,KAAKJ,gBAAgB,wB,GA1DjClB,IAAMC,YGyBnB4B,E,uKATX,OACE,8BAEE,cAACC,EAAD,U,GALU9B,IAAMC,WCJT8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.542e38a7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass GithubProfile extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            userProfile: null,\r\n            loading:false,\r\n            userName:'',\r\n        }\r\n\r\n    }\r\n\r\n    getResult = () =>{\r\n        this.setState({ loading:true })\r\n        var urlToFetch = 'https://api.github.com/users/' + this.state.userName;\r\n        var fetchData = fetch(urlToFetch);\r\n        fetchData.then( (response)=>{\r\n            var userData = response.json();\r\n            userData.then( (dataObj)=>{\r\n                this.setState({\r\n                    userProfile: dataObj,\r\n                    loading:false,\r\n                })\r\n            } )\r\n        })\r\n    }\r\n\r\n    userUpdate = (event) =>{\r\n        this.setState({\r\n            userName: event.target.value,\r\n        })\r\n    }\r\n\r\n    renderCondition = valueToRender =>{\r\n        if(this.state.userProfile === null){\r\n            return \"\";\r\n        }else if(this.state.loading){\r\n            return \"Loading...\"\r\n        }else{\r\n            return this.state.userProfile[valueToRender];\r\n        }\r\n    }    \r\n\r\n    render(){\r\n        const imageStyle = {\r\n            width: \"100px\",\r\n        };\r\n        return(\r\n            <div>\r\n                <h3>Search Github Account </h3>\r\n                <input type=\"text\" onInput={this.userUpdate}/>\r\n                <button onClick={this.getResult}>Search</button>\r\n                <h1>Github User Profile </h1>\r\n                <img style={imageStyle} src={this.renderCondition('avatar_url')} alt={this.renderCondition('login')}/>\r\n                <h2>{this.renderCondition('login')}</h2>\r\n                <p>Github Profile Link: <a href={this.renderCondition('html_url')} target=\"_blank\">{this.renderCondition('html_url')}</a></p>\r\n                <p>Created Account At: {this.renderCondition('created_at')}</p>\r\n                <p>Updated Account At: {this.renderCondition('updated_at')}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GithubProfile;","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\r\n\r\nclass FirstDiv extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {value: \"\"};\r\n  }\r\n  MyFunction = () => {\r\n    alert(this.state.value);\r\n  }\r\n  ValueUpdate = (event) => {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  render(){\r\n   return(\r\n     <div>\r\n       <h1>{this.props.nameProp}</h1>\r\n        <label>Name</label>\r\n       <input type=\"text\" onChange={this.ValueUpdate}/>\r\n       <button onClick={this.MyFunction}>Submit</button>\r\n     </div>\r\n   )\r\n  }\r\n}\r\n\r\nexport default FirstDiv;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport FirstDiv from './component/FirstDiv';\nimport GithubProfile from './component/Github';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <h1> hello world </h1>\n//       <h1> hello world </h1>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component{\n  render(){\n    return(\n      <div>\n        {/* <FirstDiv nameProp=\"Basit Aziz\"/> */}\n        <GithubProfile />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}